{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Structured Text",
	"patterns": [
		{
			"include": "#system"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#strings_dq"
		},
		{
			"include": "#strings_sq"
		},
		{
			"include": "#meta"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#primitives"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"system": {
			"patterns": [
				{
					"match": "\\n",
					"name": "meta.ending-space"
				},
				{
					"begin": "^(?=\\t)",
					"end": "(?=[^\\t])",
					"name": "meta.leading-space",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "meta.odd-tab.tabs"
								},
								"2": {
									"name": "meta.even-tab.tabs"
								}
							},
							"match": "(\\t)(\\t)?"
						}
					]
				},
				{
					"begin": "^(?= )",
					"end": "(?=[^ ])",
					"name": "meta.leading-space",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "meta.odd-tab.spaces"
								},
								"2": {
									"name": "meta.even-tab.spaces"
								}
							},
							"match": "(  )(  )?"
						}
					]
				},
				{
					"beginCaptures": {
						"0": {
							"name": "storage.type.st"
						}
					},
					"begin": "\\b(FUNCTION_BLOCK|INTERFACE)\\b",
					"end": "(?<=END_\\1)",
					"name": "meta.class.st",
					"patterns": [
						{
							"include": "#keywords"
						},
						{
							"include": "#comments"
						},
						{
							"beginCaptures": {
								"0": {
									"name": "entity.name.type.st"
								}
							},
							"begin": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b",
							"end": "(?<=END_FUNCTION_BLOCK|END_INTERFACE)",
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"beginCaptures": {
						"0": {
							"name": "storage.type.st"
						}
					},
					"begin": "\\b(PROGRAM|FUNCTION|ACTION|METHOD|PROPERTY)\\b",
					"end": "(?<=END_\\1|END_INTERFACE|END_FUNCTION_BLOCK)",
					"name": "meta.function.st",
					"patterns": [
						{
							"include": "#keywords"
						},
						{
							"include": "#comments"
						},
						{
							"beginCaptures": {
								"0": {
									"name": "entity.name.function.st"
								}
							},
							"begin": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b",
							"end": "(?<=END_PROGRAM|END_FUNCTION|END_ACTION|END_METHOD|END_PROPERTY|END_INTERFACE|END_FUNCTION_BLOCK)",
							"patterns": [
								{
									"include": "$self"
								}
							],
							"comment": "/* functions / methods / property's have `: TYPE` designations!! */ /* all these items might need to allow spanning lines.*/"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"beginCaptures": {
						"0": {
							"name": "storage.type.st"
						}
					},
					"begin": "\\b(TYPE)\\b",
					"end": "(?<=END_\\1)",
					"name": "meta.type.st",
					"patterns": [
						{
							"include": "#keywords"
						},
						{
							"include": "#comments"
						},
						{
							"beginCaptures": {
								"0": {
									"name": "entity.name.type.st"
								}
							},
							"begin": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b",
							"end": "(?<=END_TYPE)",
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"include": "#type_declaration"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"beginCaptures": {
						"0": {
							"name": "storage.type.st"
						}
					},
					"begin": "\\b(STRUCT|UNION)\\b",
					"end": "(?<=END_\\1|END_TYPE)",
					"name": "meta.struct.st",
					"patterns": [
						{
							"include": "#type_declaration"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"beginCaptures": {
						"0": {
							"name": "keyword.other.st"
						}
					},
					"begin": "\\b(?:VAR(?:_(?:INPUT|OUTPUT|IN_OUT|INST|TEMP|STAT|GLOBAL|ACCESS|EXTERNAL))?)\\b",
					"end": "(?<=END_VAR|END_PROGRAM|END_INTERFACE|END_FUNCTION_BLOCK|END_FUNCTION|END_METHOD|END_PROPERTY)",
					"name": "meta.declaration.st",
					"patterns": [
						{
							"include": "#type_declaration"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"type_declaration": {
			"patterns": [
				{
					"begin": "(?=OF|:)",
					"end": "(?<=;|:=|END_VAR|END_TYPE|END_STRUCT|END_UNION|END_PROGRAM|END_INTERFACE|END_FUNCTION_BLOCK|END_FUNCTION|END_METHOD|END_PROPERTY)",
					"patterns": [
						{
							"name": "keyword.other.st",
							"match": "\\b(?:OF|TO)\\b"
						},
						{
							"include": "#keywords"
						},
						{
							"beginCaptures": {
								"0": {
									"patterns": [
										{
											"include": "#primitives"
										},
										{
											"include": "#keywords"
										},
										{
											"name": "support.type.st",
											"match": "\\b(RS|SR|TON|TP|TOF|CTD|CTU|CTUD|R_TRIG|F_TRIG|UNPACK)\\b"
										},
										{
											"name": "entity.name.type.st",
											"match": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b"
										},
										{
											"include": "$self"
										}
									]
								}
							},
							"begin": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b",
							"end": "(?<=;|:=|END_VAR|END_TYPE|END_STRUCT|END_UNION|END_PROGRAM|END_INTERFACE|END_FUNCTION_BLOCK|END_FUNCTION|END_METHOD|END_PROPERTY)",
							"patterns": [
								{
									"include": "#type_declaration"
								},
								{
									"include": "$self"
								}
							]
						},
						{
							"include": "#type_declaration"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "support.type.primitives.st"
						},
						"2": {
							"name": "keyword.other.st"
						},
						"3": {
							"name": "constant.numeric.float.st"
						}
					},
					"match": "\\b((?:BOOL|BYTE|[DL]?WORD|U?[SDL]?INT|L?REAL)(#)|(?<!#))(-?\\d+\\.\\d+([eE][\\-+]?\\d+)?)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "support.type.primitives.st"
						},
						"2": {
							"name": "keyword.other.st"
						},
						"3": {
							"name": "constant.numeric.binary.st"
						}
					},
					"match": "\\b((?:BOOL|BYTE|[DL]?WORD|U?[SDL]?INT|L?REAL)(#)|(?<!#))(2#[0-1_]+)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "support.type.primitives.st"
						},
						"2": {
							"name": "keyword.other.st"
						},
						"3": {
							"name": "constant.numeric.octal.st"
						}
					},
					"match": "\\b((?:BOOL|BYTE|[DL]?WORD|U?[SDL]?INT|L?REAL)(#)|(?<!#))(8#[0-7_]+)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "support.type.primitives.st"
						},
						"2": {
							"name": "keyword.other.st"
						},
						"3": {
							"name": "constant.numeric.hex.st"
						}
					},
					"match": "\\b((?:BOOL|BYTE|[DL]?WORD|U?[SDL]?INT|L?REAL)(#)|(?<!#))(16#[0-9A-Fa-f_]+)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "support.type.primitives.st"
						},
						"2": {
							"name": "keyword.other.st"
						},
						"3": {
							"name": "constant.numeric.integer.st"
						}
					},
					"match": "\\b((?:BOOL|BYTE|[DL]?WORD|U?[SDL]?INT|L?REAL)(#)|(?<!#))(-?\\d+)\\b"
				},
				{
					"name": "constant.numeric.duration.st",
					"match": "(?i:\\bT(?:IME)?#(?:[0-9]+(?:[hmd]|m?s))+\\b)"
				},
				{
					"name": "constant.numeric.duration.st",
					"match": "(?i:\\b(LTIME)#(?:[0-9]+(?:[hmd]|[mnu]?s))+\\b)"
				},
				{
					"name": "constant.numeric.datetime.st",
					"match": "\\b(?i:DT|DATE_AND_TIME)#(?:[0-9]+(?:[-:]))+\\b"
				},
				{
					"name": "constant.numeric.datetime.st",
					"match": "\\b(?i:D(?:ATE)?)#(?:[0-9]+(?:(?:-[0-9]+(?:-[0-9]*))|-[0-9]*)?)\\b"
				},
				{
					"name": "constant.numeric.datetime.st",
					"match": "\\b(?i:TOD|TIME_OF_DAY)#(?:[0-9]+(?::[0-9]+)+)\\b"
				},
				{
					"name": "invalid.constant.st",
					"match": "\\b(?i:TOD|TIME_OF_DAY|D(?:ATE)?|DT|DATE_AND_TIME|L?TIME|T)#"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.conditional.st",
					"match": "\\b(?:(?:END_)?(?:IF|CASE)|(?:OF|ELSE|ELSIF|THEN))\\b"
				},
				{
					"name": "keyword.control.st",
					"match": "\\b(?:(?:END_)?(?:WHILE|FOR|REPEAT)|(?:DO|TO|BY|RETURN|EXIT|CONTINUE|UNTIL))\\b"
				},
				{
					"name": "keyword.operator.assignment.st",
					"match": ":=|=>"
				},
				{
					"name": "keyword.operator.content.st",
					"match": "\\^|MOVE"
				},
				{
					"name": "punctuation.terminator.statement.st",
					"match": ";"
				},
				{
					"name": "punctuation.separator.st",
					"match": "[:,]"
				},
				{
					"name": "keyword.operator.logical.st",
					"match": "\\b(?:OR(?:_ELSE)?|AND(?:_THEN)?|NOT|XOR|GE|LE|EQ|NE|GT|LT)\\b|&"
				},
				{
					"name": "keyword.operator.comparison.st",
					"match": "<>|<=|<|>=|>|="
				},
				{
					"name": "keyword.operator.arithmetic.st",
					"match": "\\+|-|/|\\*"
				},
				{
					"name": "keyword.operator.arithmetic.st",
					"match": "\\b(?:ABS|MOD|ACOS|ASIN|ATAN|COS|EXP|EXPT|LN|LOG|SIN|SQRT|TAN|SEL|MUX|SHL|SHR|ROL|ROR|ADD|DIV|MUL|SUB|LIMIT|MAX|MIN|ADR(?:INST)?|SIZE(?:OF)?|BIT_?ADR|TRUNC(?:_INT)?)\\b"
				},
				{
					"name": "keyword.other.storage.st",
					"match": "\\b(?:(?:POINTER|REF(?:ERENCE)?)|REF_TO|AT|TASK|WITH|USING|FROM)\\b"
				},
				{
					"name": "storage.modifier.st",
					"match": "\\b(?:CONSTANT|RETAIN|PERSISTENT|PUBLIC|PRIVATE|PROTECTED|INTERNAL|FINAL)\\b"
				},
				{
					"name": "constant.language.st",
					"match": "\\b(?:TRUE|FALSE|NULL)\\b"
				},
				{
					"name": "keyword.other.st",
					"match": "\\b(?:VAR(?:_(?:INPUT|OUTPUT|IN_OUT|INST|TEMP|STAT|GLOBAL|ACCESS|EXTERNAL))?|END_VAR)\\b"
				},
				{
					"name": "support.function.st",
					"match": "\\b(?:(BOOL|BYTE|[DL]?WORD|U?[SDL]?INT|L?REAL|L?TIME|L?TOD|L?DT|L?DATE|W?STRING)_)?TO_(?!\\1)\\g<1>\\b"
				},
				{
					"name": "support.function.st",
					"match": "\\b(?:(?:UPPER|LOWER)_BOUND|CONCAT|DELETE|FIND|INSERT|LEFT|LEN|REPLACE|RIGHT|RTC|MID|SEMA|ROUND|FLOOR|CEIL|REF)\\b"
				},
				{
					"name": "storage.type.st",
					"match": "\\b(?:END_)?(?:PROGRAM|CONFIGURATION|TCP|RESOURCE|CHANNEL|LIBRARY|FOLDER|BINARIES|INCLUDES|SOURCES|ACTION|(?:INITIAL_)?STEP|TRANSITION|TYPE|STRUCT|UNION|FUNCTION(?:_BLOCK)?|NAMESPACE|INTERFACE|METHOD|PROPERTY)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "storage.modifier.st"
						},
						"2": {
							"name": "entity.other.inherited-class.st"
						}
					},
					"match": "\\b(EXTENDS|IMPLEMENTS)(?:\\s+([A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*))?\\b"
				},
				{
					"name": "invalid.st",
					"match": "#"
				}
			]
		},
		"primitives": {
			"patterns": [
				{
					"name": "support.type.primitives.st",
					"match": "\\b(?:ANY|BIT|BOOL|BYTE|[DL]?WORD|U?[SDL]?INT|L?REAL|L?TIME(?:_OF_DAY)?|L?TOD|L?DT|L?DATE(?:_AND_TIME)?|W?STRING|W?CHAR|ARRAY)\\b(?!#)"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "support.variable.address.st",
					"match": "\\%[IQM][XBWDL][0-9\\.]*\\b"
				},
				{
					"name": "support.variable.address.st",
					"match": "\\%[IQ][0-9\\.]*\\b"
				},
				{
					"name": "support.function.st",
					"match": "\\b(?:SEL_|MUX_)[A-Za-z]*\\b"
				},
				{
					"name": "punctuation.accessor.st",
					"match": "(?<!\\.)\\.(?!\\.)"
				},
				{
					"name": "keyword.operator.range.st",
					"match": "(?<!\\.)\\.\\.(?!\\.)"
				},
				{
					"match": "\\b(?:THIS|SUPER)\\b",
					"name": "variable.language.st"
				},
				{
					"match": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*(?=\\()",
					"name": "variable.function.st"
				},
				{
					"name": "variable.other.object.st",
					"match": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*(?=\\.)"
				},
				{
					"name": "variable.other.object.property.st",
					"match": "(?<=\\.)[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*(?=\\.)"
				},
				{
					"name": "variable.other.property.st",
					"match": "(?<=\\.)[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b"
				},
				{
					"name": "variable.other.readwrite.st",
					"match": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b"
				},
				{
					"name": "entity.name.type.st",
					"match": ":\\s*[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b"
				}
			]
		},
		"meta": {
			"patterns": [
				{
					"name": "meta.expression.st",
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.begin.st"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.st"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.index.st",
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.begin.st"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.end.st"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.pragma.st",
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.brace.begin.st"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.brace.end.st"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"include": "#comment_l"
				},
				{
					"include": "#comment_st"
				},
				{
					"include": "#comment_g"
				}
			]
		},
		"comment_l": {
			"name": "comment.line.st",
			"begin": "\\/\\/",
			"end": "$",
			"patterns": [
				{
					"name": "constant.character.escape.st",
					"match": "\\\\."
				}
			]
		},
		"comment_st": {
			"name": "comment.block.st",
			"begin": "\\(\\*",
			"end": "\\*\\)",
			"patterns": [
				{
					"name": "constant.character.escape.st",
					"match": "\\\\."
				},
				{
					"include": "#comment_st"
				}
			]
		},
		"comment_g": {
			"name": "comment.block.st",
			"begin": "\\/\\*",
			"end": "\\*\\/",
			"patterns": [
				{
					"name": "constant.character.escape.st",
					"match": "\\\\."
				}
			]
		},
		"strings_dq": {
			"name": "string.quoted.double.st",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.st",
					"match": "\\\\."
				},
				{
					"name": "constant.character.escape.st",
					"match": "\\$[$\"LlNnpPRrTt]"
				},
				{
					"name": "constant.character.escape.st",
					"match": "\\$[A-F0-9]{2}"
				},
				{
					"name": "invalid.character.escape.st",
					"match": "\\$"
				}
			]
		},
		"strings_sq": {
			"name": "string.single.double.st",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.st",
					"match": "\\\\."
				},
				{
					"name": "constant.character.escape.st",
					"match": "\\$[$'LlNnpPRrTt]"
				},
				{
					"name": "constant.character.escape.st",
					"match": "\\$[A-F0-9]{2}"
				},
				{
					"name": "invalid.character.escape.st",
					"match": "\\$"
				}
			]
		}
	},
	"scopeName": "source.st"
}
