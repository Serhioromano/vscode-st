{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Structured Text",
    "fileTypes": [
        ".iecst",
        ".st",
        ".exp",
        ".scl"
    ],
    "patterns": [
        {
            "include": "#system"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#meta"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#keywords"
        }
    ],
    "repository": {
        "system": {
            "patterns": [
                {
                    "match": "\\n",
                    "name": "meta.ending-space"
                },
                {
                    "begin": "^(?=\\t)",
                    "end": "(?=[^\\t])",
                    "name": "meta.leading-space",
                    "patterns": [
                        {
                            "match": "(\\t)(\\t)?",
                            "captures": {
                                "1": {
                                    "name": "meta.odd-tab.tabs"
                                },
                                "2": {
                                    "name": "meta.even-tab.tabs"
                                }
                            }
                        }
                    ]
                },
                {
                    "begin": "^(?= )",
                    "end": "(?=[^ ])",
                    "name": "meta.leading-space",
                    "patterns": [
                        {
                            "match": "(  )(  )?",
                            "captures": {
                                "1": {
                                    "name": "meta.odd-tab.spaces"
                                },
                                "2": {
                                    "name": "meta.even-tab.spaces"
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "storage.type.class.st",
                    "match": "\\s*\\b(PROGRAM|FUNCTION_BLOCK|FUNCTION|TYPE)\\b\\s*(PRIVATE|PUBLIC|PROTECTED)?\\s*\\b([a-zA-Z_0-9]*)\\b",
                    "captures": {
                        "2": {
                            "name": "storage.modifier.st"
                        },
                        "3": {
                            "name": "entity.name.function.st"
                        }
                    }
                },
                {
                    "name": "storage.type.class.st",
                    "match": "\\s*\\b(EXTENDS|IMPLEMENTS)\\b\\s*\\b([a-zA-Z_0-9]*)\\b",
                    "captures": {
                        "2": {
                            "name": "entity.name.function.st"
                        }
                    }
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.st",
                    "match": "\\b(2#[0-9\\_]+)\\b"
                },
                {
                    "name": "constant.numeric.hex.st",
                    "match": "\\b(16#[0-9A-Fa-f\\_]+)\\b"
                },
                {
                    "name": "constant.numeric.integer.st",
                    "match": "\\b(8#[0-9\\_]+)\\b"
                },
                {
                    "name": "constant.numeric.float.st",
                    "match": "\\b\\d*\\.\\d+([eE][\\-+]?\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.integer.st",
                    "match": "\\b(\\d)+\\b"
                },
                {
                    "name": "constant.numeric.integer.st",
                    "match": "\\b(BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT)#(2|8)#[0-9\\_]+\\b"
                },
                {
                    "name": "constant.numeric.integer.st",
                    "match": "\\b(BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT)#16#[a-fA-F0-9\\_]+\\b"
                },
                {
                    "name": "constant.numeric.integer.st",
                    "match": "\\b(BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT)#-?[0-9\\_]+\\b"
                },
                {
                    "name": "constant.numeric.float.st",
                    "match": "\\b(L?REAL)#-?\\d*\\.\\d+([eE][\\-+]?\\d+)?\\b"
                }
            ]
        },
        "controls": {
            "patterns": [
                {
                    "name": "keyword.control.conditional.st",
                    "match": "\\b(?:END_)?(?:IF|CASE|OF|ELSE|ELSIF|THEN|__TRY|__CATCH|__FINALLY|__ENDTRY)\\b"
                },
                {
                    "name": "keyword.control.loop.st",
                    "match": "\\b(?:END_)?(?:WHILE|FOR|REPEAT|DO|TO|BY)\\b"
                },
                {
                    "name": "keyword.control.flow.st",
                    "match": "\\b(?:RETURN|EXIT|CONTINUE|GOTO|JMP|BEGIN|COUNTER|GOTO)\\b"
                },
                {
                    "name": "keyword.control.st",
                    "match": "\\b(END_)?(TASK|WITH|USING|USES|FROM|UNTIL)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.range.st",
                    "match": "(?<!\\.)\\.\\.(?!\\.)"
                },
                {
                    "name": "keyword.operator.assignment.st",
                    "match": "(:=|=>|S=|R=)"
                },
                {
                    "name": "keyword.operator.content.st",
                    "match": "\\^|MOVE"
                },
                {
                    "name": "keyword.operator.logical.st",
                    "match": "\\b(OR(_ELSE)?|AND(_THEN)?|NOT|XOR|NOR)\\b|&"
                },
                {
                    "name": "keyword.operator.comparison.st",
                    "match": "(?:<>|<|=|>|<=|>=)"
                },
                {
                    "name": "keyword.operator.comparison.st",
                    "match": "\\b(?:GE|LE|EQ|NE|GT|LT)\\b"
                },
                {
                    "name": "keyword.operator.arithmetic.st",
                    "match": "(?:\\+|\\-|\\/|\\*|MOD)"
                },
                {
                    "name": "keyword.operator.arithmetic.st",
                    "match": "\\b(?:ABS|SIN|ABS|ACOS|ASIN|ATAN|COS|EXP|EXPT|LN|LOG|SIN|SQRT|TAN|SEL|MUX|SHL|SHR|ROL|ROR|ADD|DIV|MUL|SUB|MAX|MIN|ADR(INST)?|SIZE(OF)?|BIT_?ADR|TRUNC(_INT)?)(?=\\()"
                },
                {
                    "name": "keyword.operator.arithmetic.st",
                    "match": "\\b(SEL_|MUX_)[A-Za-z]*\\b"
                },
                {
                    "name": "keyword.operator.new.st",
                    "match": "\\b__(NEW|DELETE)(?=\\()\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "support.function.st",
                    "match": "\\b[A-Za-z_]*(_TO_|TO_|FROM_|TRUNC_)[A-Za-z_]+(?=\\()"
                },
                {
                    "name": "support.function.st",
                    "match": "\\b(?:TRUNC|MOVE|CONCAT|LIMIT|DELETE|FIND|INSERT|LEFT|LEN|REPLACE|RIGHT|RTC|MID|SEMA|ROUND|FLOOR|CEIL|UNPACK|REF)(?=\\()"
                },
                {
                    "begin": "([a-zA-Z_0-9]+)(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.st"
                        },
                        "2": {
                            "name": "punctuation.parenthesis.begin.st"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.parenthesis.end.st"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        },
                        {
                            "match": "\\b(N|R0|S0|L|D|P|SD|DS|SL|T)\\b",
                            "name": "variable.parameter.st",
                            "comment": "Action parameters"
                        },
                        {
                            "match": "\\b([a-zA-Z0-9_]+) *:?=>? *",
                            "captures": {
                                "1": {
                                    "name": "variable.parameter.st"
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "punctuation.accessor.st",
                    "match": "(?<!\\.)\\.(?!\\.)"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "comment": "Rule for OF in var declaration",
                    "begin": "\\b(?:VAR(?:_(?:INPUT|OUTPUT|IN_OUT|TEMP|GLOBAL|ACCESS|EXTERNAL|INST|STAT))?|STRUCT|UNION)\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "entity.name.type.st"
                        }
                    },
                    "end": "\\b(?:END_(?:VAR|STRUCT|UNION))\\b",
                    "endCaptures": {
                        "0": {
                            "name": "entity.name.type.st"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\b(OF)\\b",
                            "name": "support.type.primitives.st"
                        },
                        {
                            "match": "\\b([a-zA-Z0-9_]+) *: *\\b",
                            "captures": {
                                "1": {
                                    "name": "variable.name.st"
                                }
                            }
                        },
                        {
                            "include": "$self"
                        }
                    ]
                },
                {
                    "include": "#controls"
                },
                {
                    "name": "keyword.other.storage.st",
                    "match": "\\b(POINTER TO|POINTER|REF(ERENCE)?|REF_TO|OVERLAP|USING|FROM)\\b"
                },
                {
                    "name": "storage.type.class.st",
                    "match": "\\b(END_)?(PROGRAM|FUNCTION_BLOCK|FUNCTION|CONFIGURATION|TCP|RESOURCE|CHANNEL|LIBRARY|FOLDER|BINARIES|INCLUDES|SOURCES|ACTION|STEP|INITIAL_STEP|TRANSITION|NAMESPACE|IMPLEMENTATION|INTERFACE|PROPERTY|METHOD|CONST|ORGANIZATION_BLOCK|DATA_BLOCK|LABEL)\\b"
                },
                {
                    "name": "storage.type.class.st",
                    "match": "\\b(RS|SR|TON|TP|TOF|CTD|CTU|CTUD|R_TRIG|F_TRIG)\\b"
                },
                {
                    "name": "punctuation.terminator.statement.st",
                    "match": "[;]"
                },
                {
                    "name": "storage.modifier.st",
                    "match": "\\b(?:ABSTRACT|CONSTANT|RETAIN|PERSISTENT|PUBLIC|PRIVATE|PROTECTED|INTERNAL|FINAL)\\b"
                },
                {
                    "name": "constant.language.st",
                    "match": "\\b(TRUE|FALSE|NULL|VOID|NIL)\\b"
                },
                {
                    "name": "support.type.primitives.st",
                    "match": "\\b(AT|BOOL|BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT|L?REAL|TIME(?:_OF_DAY)?|TOD|DT|DATE(?:_AND_TIME)?|STRING|ARRAY|ANY)\\b"
                },
                {
                    "match": "(?<=\\.)[A-Za-z_](?:[0-9A-Za-z_])*\\b",
                    "name": "variable.parameter.st",
                    "comment": "Parameter or an object"
                },
                {
                    "name": "support.type.primitives.st",
                    "match": "\\b(ANY_)?(DERIVED|ELEMENTARY|MAGNITUDE|NUM|REAL|INT|UNSIGNED|SIGNED|DURATION|BIT|CHARS|STRING|CHAR|DATE)\\b"
                },
                {
                    "match": "\\b(EXTENDS|IMPLEMENTS)\\b",
                    "name": "entity.other.inherited-class.st"
                },
                {
                    "match": "\\b(?:THIS|SUPER)\\b",
                    "name": "variable.language.st"
                },
                {
                    "name": "invalid.st",
                    "match": "#"
                },
                {
                    "match": "\\b([a-zA-Z0-9_]+)\\b",
                    "name": "variable.name.st"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.constant",
                    "match": "\\b(T|DT|TOD|D)#[0-9\\:\\-\\_shmydSMHDY]+\\b"
                },
                {
                    "name": "variable.other.constant",
                    "match": "\\b[A-Za-z]{1,6}#[a-zA-Z0-9\\_]+\\b"
                },
                {
                    "name": "variable.other.constant",
                    "match": "\\%(I|Q|M|PQ|PI)(X|B|W|D|L)[0-9\\.]+\\b"
                },
                {
                    "name": "variable.other.constant",
                    "match": "\\%(I|Q)[0-9\\.]+\\b"
                }
            ]
        },
        "meta": {
            "patterns": [
                {
                    "name": "meta.expression.st",
                    "begin": "[^a-zA-Z_0-9]+\\((?!\\*)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.parenthesis.begin.st"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.parenthesis.end.st"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                },
                {
                    "name": "meta.index.st",
                    "begin": "\\[",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.bracket.begin.st"
                        }
                    },
                    "end": "\\]",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.bracket.end.st"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                },
                {
                    "name": "comment.block.st",
                    "begin": "\\{",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.brace.begin.st"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brace.end.st"
                        }
                    },
                    "patterns": [
                        {
                            "match": "(attribute|text|info|warning) *('[^']+')(?: *(:=)? * ('[^']+')?)?",
                            "captures": {
                                "1": {
                                    "name": "variable.parameter.st"
                                },
                                "3": {
                                    "name": "keyword.operator.assignment.st"
                                },
                                "2": {
                                    "name": "string.quoted.single.st"
                                },
                                "4": {
                                    "name": "string.quoted.single.st"
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "include": "#comment_l"
                },
                {
                    "include": "#comment_st"
                },
                {
                    "include": "#comment_g"
                }
            ],
            "repository": {
                "comment_l": {
                    "name": "comment.line.double-slash.st",
                    "begin": "\\/\\/",
                    "end": "$",
                    "patterns": [
                        {
                            "include": "#todo"
                        },
                        {
                            "name": "constant.character.escape.st",
                            "match": "\\\\."
                        }
                    ]
                },
                "comment_st": {
                    "name": "comment.block.st",
                    "begin": "\\(\\*",
                    "end": "\\*\\)",
                    "patterns": [
                        {
                            "include": "#todo"
                        },
                        {
                            "include": "#comment_st"
                        },
                        {
                            "match": "(@[A-Z_]+) *(:=) * ('[\\d\\w\\W ]*')",
                            "captures": {
                                "1": {
                                    "name": "variable.parameter.st"
                                },
                                "2": {
                                    "name": "keyword.operator.assignment.st"
                                },
                                "3": {
                                    "name": "string.quoted.single.st"
                                }
                            }
                        }
                    ]
                },
                "comment_g": {
                    "name": "comment.block.st",
                    "begin": "\\/\\*",
                    "end": "\\*\\/",
                    "patterns": [
                        {
                            "include": "#todo"
                        },
                        {
                            "include": "#comment_g"
                        },
                        {
                            "_name": "constant.character.escape.st",
                            "_match": "\\\\."
                        }
                    ]
                },
                "todo": {
                    "match": "\\b(?:TODO(:)?\\s)",
                    "name": "markup.bold keyword.todo.st"
                }
            }
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.single.st",
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.single.begin.st"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.single.end.st"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escape"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.st",
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.double.begin.st"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.double.end.st"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escape"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.st",
                    "begin": "\\b(W?STRING)#(\")",
                    "beginCaptures": {
                        "2": {
                            "name": "punctuation.double.begin.st"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.double.end.st"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escape"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.st",
                    "begin": "\\b(W?STRING)#(')",
                    "beginCaptures": {
                        "2": {
                            "name": "punctuation.single.begin.st"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.single.end.st"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escape"
                        }
                    ]
                }
            ],
            "repository": {
                "escape": {
                    "name": "constant.character.escape.st",
                    "match": "\\$(\\$|'|\"|N|L|R|T|nnnn|nn)"
                }
            }
        }
    },
    "scopeName": "source.st"
}
