{
	"comments": {
		"lineComment": "//",
		"blockComment": ["(*", "*)"]
	},
	"brackets": [
		["{", "}"],
		["[", "]"],
		["VAR", "END_VAR"],
		["VAR_INPUT", "END_VAR"],
		["VAR_OUTPUT", "END_VAR"],
		["VAR_IN_OUT", "END_VAR"],
		["VAR_TEMP", "END_VAR"],
		["VAR_GLOBAL", "END_VAR"],
		["VAR_ACCESS", "END_VAR"],
		["VAR_EXTERNAL", "END_VAR"],
		["TYPE", "END_TYPE"],
		["STRUCT", "END_STRUCT"],
		["PROGRAM", "END_PROGRAM"],
		["CLASS", "END_CLASS"],
		["FUNCTION", "END_FUNCTION"],
		["FUNCTION_BLOCK", "END_FUNCTION_BLOCK"],
		["ACTION", "END_ACTION"],
		["STEP", "END_STEP"],
		["INITIAL_STEP", "END_STEP"],
		["TRANSACTION", "END_TRANSACTION"],
		["CONFIGURATION", "END_CONFIGURATION"],
		["TCP", "END_TCP"],
		["RECOURCE", "END_RECOURCE"],
		["CHANNEL", "END_CHANNEL"],
		["LIBRARY", "END_LIBRARY"],
		["FOLDER", "END_FOLDER"],
		["BINARIES", "END_BINARIES"],
		["INCLUDES", "END_INCLUDES"],
		["SOURCES", "END_SOURCE"],
		["IF", "THEN"],
		["THEN", "END_IF"],
		["THEN", "ELSE"],
		["THEN", "ELSIF"],
		["ELSIF", "THEN"],
		["ELSE", "END_IF"],
		["CASE", "OF"],
		["OF", "END_CASE"],
		["DO", "END_FOR"],
		["FOR", "END_FOR"],
		["DO", "END_WHILE"],
		["WHILE", "DO"],
		["REPEAT", "END_REPEAT"],
		["(", ")"],
		["__TRY", "__CATCH"],
		["__CATCH", "__FINALLY"],
		["__FINALLY", "__ENDTRY"]
	],
	"autoClosingPairs": [
		{ "open": "{", "close": "}" },
		{ "open": "[", "close": "]" },
		{ "open": "(", "close": ")" },
		{ "open": "\"", "close": "\"", "notIn": ["string"] },
		{ "open": "'", "close": "'", "notIn": ["string", "comment"] },
		{ "open": "(*", "close": " *", "notIn": ["string"] },
		{ "open": "/*", "close": " */", "notIn": ["string"] },
		{ "open": "VAR_INPUT", "close": "END_VAR", "notIn": ["string"] },
		{ "open": "VAR_OUTPUT", "close": "END_VAR", "notIn": ["string"] },
		{ "open": "VAR_IN_OUT", "close": "END_VAR", "notIn": ["string"] },
		{ "open": "VAR_TEMP", "close": "END_VAR", "notIn": ["string"] },
		{ "open": "VAR_GLOBAL", "close": "END_VAR", "notIn": ["string"] },
		{ "open": "VAR_ACCESS", "close": "END_VAR", "notIn": ["string"] },
		{ "open": "VAR_EXTERNAL", "close": "END_VAR", "notIn": ["string"] },
		{ "open": "TYPE", "close": "END_TYPE", "notIn": ["string"] },
		{ "open": "STRUCT", "close": "END_STRUCT", "notIn": ["string"] },
		{ "open": "PROGRAM", "close": "END_PROGRAM", "notIn": ["string"] },
		{ "open": "CLASS", "close": "END_CLASS", "notIn": ["string"] },
		{ "open": "FUNCTION", "close": "END_FUNCTION", "notIn": ["string"] },
		{ "open": "FUNCTION_BLOCK", "close": "END_FUNCTION_BLOCK", "notIn": ["string"] },
		{ "open": "ACTION", "close": "END_ACTION", "notIn": ["string"] },
		{ "open": "STEP", "close": "END_STEP", "notIn": ["string"] },
		{ "open": "INITIAL_STEP", "close": "END_STEP", "notIn": ["string"] },
		{ "open": "TRANSACTION", "close": "END_TRANSACTION", "notIn": ["string"] },
		{ "open": "CONFIGURATION", "close": "END_CONFIGURATION", "notIn": ["string"] },
		{ "open": "TCP", "close": "END_TCP", "notIn": ["string"] },
		{ "open": "RECOURCE", "close": "END_RECOURCE", "notIn": ["string"] },
		{ "open": "CHANNEL", "close": "END_CHANNEL", "notIn": ["string"] },
		{ "open": "LIBRARY", "close": "END_LIBRARY", "notIn": ["string"] },
		{ "open": "FOLDER", "close": "END_FOLDER", "notIn": ["string"] },
		{ "open": "BINARIES", "close": "END_BINARIES", "notIn": ["string"] },
		{ "open": "INCLUDES", "close": "END_INCLUDES", "notIn": ["string"] },
		{ "open": "SOURCES", "close": "END_SOURCE", "notIn": ["string"] }
	],
	"autoCloseBefore": " \n\t",
	"surroundingPairs": [
		["{", "}"],
		["[", "]"],
		["(", ")"],
		["(*", "*)"],
		["\"", "\""],
		["'", "'"]
	],
	"folding": {
		"offSide": true,
		"markers": {
			"start": "^\\s*//#region",
			"end": "^\\s*//#endregion"
		}
	},
    "wordPattern": "(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)"
	// "indentationRules": {
	// 	"increaseIndentPattern": "/^.*(THEN|DO|OF|VAR)$/",
	// 	"decreaseIndentPattern": "/^(END_IF;)$/"
	// 	// "increaseIndentPattern": "({(?!.+}).*|\\(|\\[|(IF|ELSE|FOR|WHILE|CASE|THEN|ELSIF|DO|BY|OF|REPEAT|).*)\\s*(/[\\(*].*)?$",
	// 	// "decreaseIndentPattern": "^((.*\\*\\/)?|(.*\\*\\)?)\\s*((\\})|(\\)+[;,])|(\\][;,])|\\b(else)|\\b((END_(IF|FOR|WHILE|CASE|REPEAT));))"
	// }

	//"enhancedBrackets":[
	// 	{ "openTrigger": "\\s", "open": "VAR", "closeComplete": "END_VAR", "matchCase": true },
	// 	{ openTrigger: 'e', open: /case$/i, closeComplete: 'end', matchCase: true },
	// 	{ openTrigger: 'n', open: /when$/i, closeComplete: 'then', matchCase: true }
	// ]
	// noindentBrackets: '()',
}
