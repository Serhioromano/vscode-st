/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, ReferenceInfo, isAstNode, TypeMetaData } from 'langium';

export type Dtypes = 'BOOL' | 'BYTE' | 'DINT' | 'DT' | 'DWORD' | 'INT' | 'LINT' | 'LREAL' | 'REAL' | 'SINT' | 'TIME' | 'TOD' | 'UDINT' | 'UINT' | 'ULINT' | 'USINT' | 'WORD';

export interface Document extends AstNode {
    functionb: Array<FunctionBlock>
    functions: Array<Function>
    programs: Array<Program>
    types: Array<Type>
}

export const Document = 'Document';

export function isDocument(item: unknown): item is Document {
    return reflection.isInstance(item, Document);
}

export interface Function extends AstNode {
    readonly $container: Document;
    name: string
    return_type: Dtypes
}

export const Function = 'Function';

export function isFunction(item: unknown): item is Function {
    return reflection.isInstance(item, Function);
}

export interface FunctionBlock extends AstNode {
    readonly $container: Document;
    name: string
}

export const FunctionBlock = 'FunctionBlock';

export function isFunctionBlock(item: unknown): item is FunctionBlock {
    return reflection.isInstance(item, FunctionBlock);
}

export interface Program extends AstNode {
    readonly $container: Document;
    name: string
}

export const Program = 'Program';

export function isProgram(item: unknown): item is Program {
    return reflection.isInstance(item, Program);
}

export interface Type extends AstNode {
    readonly $container: Document;
    name: string
}

export const Type = 'Type';

export function isType(item: unknown): item is Type {
    return reflection.isInstance(item, Type);
}

export type StAstType = 'Document' | 'Function' | 'FunctionBlock' | 'Program' | 'Type';

export class StAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Document', 'Function', 'FunctionBlock', 'Program', 'Type'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Document': {
                return {
                    name: 'Document',
                    mandatory: [
                        { name: 'functionb', type: 'array' },
                        { name: 'functions', type: 'array' },
                        { name: 'programs', type: 'array' },
                        { name: 'types', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new StAstReflection();
