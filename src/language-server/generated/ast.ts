/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, ReferenceInfo, isAstNode, TypeMetaData } from 'langium';

export type DeclarationConstant = 'CONSTANT' | 'PERSISTENT' | 'RETAIN';

export type DeclarationTypes = Function | FunctionBlock;

export const DeclarationTypes = 'DeclarationTypes';

export function isDeclarationTypes(item: unknown): item is DeclarationTypes {
    return reflection.isInstance(item, DeclarationTypes);
}

export type VariableType = string;

export interface DataType extends AstNode {
    readonly $container: Namespace | POU;
    name: string
    scopes: Array<Scopes>
}

export const DataType = 'DataType';

export function isDataType(item: unknown): item is DataType {
    return reflection.isInstance(item, DataType);
}

export interface Declarations extends AstNode {
    readonly $container: Scopes | VarGlobal;
    address?: string
    variable_name: string
    variable_type: VariableType
}

export const Declarations = 'Declarations';

export function isDeclarations(item: unknown): item is Declarations {
    return reflection.isInstance(item, Declarations);
}

export interface Document extends AstNode {
    stPou: Array<POU>
}

export const Document = 'Document';

export function isDocument(item: unknown): item is Document {
    return reflection.isInstance(item, Document);
}

export interface Function extends AstNode {
    readonly $container: Namespace | POU;
    name: string
    scopes: Array<Scopes>
}

export const Function = 'Function';

export function isFunction(item: unknown): item is Function {
    return reflection.isInstance(item, Function);
}

export interface FunctionBlock extends AstNode {
    readonly $container: Namespace | POU;
    name: string
    scopes: Array<Scopes>
}

export const FunctionBlock = 'FunctionBlock';

export function isFunctionBlock(item: unknown): item is FunctionBlock {
    return reflection.isInstance(item, FunctionBlock);
}

export interface Namespace extends AstNode {
    readonly $container: POU;
    datatype: Array<DataType>
    function: Array<Function>
    function_block: Array<FunctionBlock>
    name: string
    program: Array<Program>
    var_global: Array<VarGlobal>
}

export const Namespace = 'Namespace';

export function isNamespace(item: unknown): item is Namespace {
    return reflection.isInstance(item, Namespace);
}

export interface POU extends AstNode {
    readonly $container: Document;
    datatype: Array<DataType>
    function: Array<Function>
    function_block: Array<FunctionBlock>
    namespace: Array<Namespace>
    program: Array<Program>
    varglobal: Array<VarGlobal>
}

export const POU = 'POU';

export function isPOU(item: unknown): item is POU {
    return reflection.isInstance(item, POU);
}

export interface Program extends AstNode {
    readonly $container: Namespace | POU;
    name: string
    scopes: Array<Scopes>
}

export const Program = 'Program';

export function isProgram(item: unknown): item is Program {
    return reflection.isInstance(item, Program);
}

export interface Scopes extends AstNode {
    readonly $container: DataType | Function | FunctionBlock | Program;
    dec_constant: Array<DeclarationConstant>
    declarations: Array<Declarations>
}

export const Scopes = 'Scopes';

export function isScopes(item: unknown): item is Scopes {
    return reflection.isInstance(item, Scopes);
}

export interface VarGlobal extends AstNode {
    readonly $container: Namespace | POU;
    dec_constant: Array<DeclarationConstant>
    declarations: Array<Declarations>
}

export const VarGlobal = 'VarGlobal';

export function isVarGlobal(item: unknown): item is VarGlobal {
    return reflection.isInstance(item, VarGlobal);
}

export type StAstType = 'DataType' | 'DeclarationTypes' | 'Declarations' | 'Document' | 'Function' | 'FunctionBlock' | 'Namespace' | 'POU' | 'Program' | 'Scopes' | 'VarGlobal';

export class StAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['DataType', 'DeclarationTypes', 'Declarations', 'Document', 'Function', 'FunctionBlock', 'Namespace', 'POU', 'Program', 'Scopes', 'VarGlobal'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case Function:
            case FunctionBlock: {
                return this.isSubtype(DeclarationTypes, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'DataType': {
                return {
                    name: 'DataType',
                    mandatory: [
                        { name: 'scopes', type: 'array' }
                    ]
                };
            }
            case 'Document': {
                return {
                    name: 'Document',
                    mandatory: [
                        { name: 'stPou', type: 'array' }
                    ]
                };
            }
            case 'Function': {
                return {
                    name: 'Function',
                    mandatory: [
                        { name: 'scopes', type: 'array' }
                    ]
                };
            }
            case 'FunctionBlock': {
                return {
                    name: 'FunctionBlock',
                    mandatory: [
                        { name: 'scopes', type: 'array' }
                    ]
                };
            }
            case 'Namespace': {
                return {
                    name: 'Namespace',
                    mandatory: [
                        { name: 'datatype', type: 'array' },
                        { name: 'function', type: 'array' },
                        { name: 'function_block', type: 'array' },
                        { name: 'program', type: 'array' },
                        { name: 'var_global', type: 'array' }
                    ]
                };
            }
            case 'POU': {
                return {
                    name: 'POU',
                    mandatory: [
                        { name: 'datatype', type: 'array' },
                        { name: 'function', type: 'array' },
                        { name: 'function_block', type: 'array' },
                        { name: 'namespace', type: 'array' },
                        { name: 'program', type: 'array' },
                        { name: 'varglobal', type: 'array' }
                    ]
                };
            }
            case 'Program': {
                return {
                    name: 'Program',
                    mandatory: [
                        { name: 'scopes', type: 'array' }
                    ]
                };
            }
            case 'Scopes': {
                return {
                    name: 'Scopes',
                    mandatory: [
                        { name: 'dec_constant', type: 'array' },
                        { name: 'declarations', type: 'array' }
                    ]
                };
            }
            case 'VarGlobal': {
                return {
                    name: 'VarGlobal',
                    mandatory: [
                        { name: 'dec_constant', type: 'array' },
                        { name: 'declarations', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new StAstReflection();
